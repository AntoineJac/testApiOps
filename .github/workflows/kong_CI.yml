# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  # push:
  #   branches:
  #    - master
  # pull_request:
  #   types:
  #     - opened
  #     - synchronize

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy-customer-api:
    name: Deploy Customer API to Gateway and Dev Portal
    runs-on: [self-hosted, macos-latest]
    steps:
      - name: Checkout branch
        uses: actions/checkout@v1
      - name: Backup Insomnia Spec
        run: |
          mkdir ./spec-backup
          cp ./.insomnia/ApiSpec/*.yml ./spec-backup
          ls ./spec-backup            
      #Installing the inso, deck and portal cli
      - name: Install NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: '12'
      - name: Install Deck  
        run: |
          brew tap kong/deck
          brew install deck
      - name: Install inso
        run: brew install inso
          
      # Get Dev Portal EU ID
      - name: Get Dev Portal EU ID
        run: |
          portalEuId=$( curl 'https://eu.api.konghq.com/konnect-api/api/portals' -H 'authorization: Bearer ${{ secrets.KONNECT_TOKEN }}' | jq -r '.data[].id' )
          echo "PORTAL_EU_ID=$portalEuId" >> $GITHUB_ENV
        
      # Push Dev Portal EU changes
      - name: Dev Portal EU change
        run: |
          curl -X 'PATCH' 'https://eu.api.konghq.com/konnect-api/api/portals/${{ env.PORTAL_EU_ID }}' \
          -H 'authorization: Bearer ${{ secrets.KONNECT_TOKEN }}' \
          -H 'content-type: application/json' \
          -d @./portal/spec_EU.json

      # Get Dev Portal US ID
      - name: Get Dev Portal US ID
        run: |
          portalUsId=$( curl 'https://us.api.konghq.com/konnect-api/api/portals' -H 'authorization: Bearer ${{ secrets.KONNECT_TOKEN }}' | jq -r '.data[].id' )
          echo "PORTAL_US_ID=$portalUsId" >> $GITHUB_ENV
        
      # Push Dev Portal US changes
      - name: Dev Portal US change
        run: |
          curl -X 'PATCH' 'https://us.api.konghq.com/konnect-api/api/portals/${{ env.PORTAL_US_ID }}' \
          -H 'authorization: Bearer ${{ secrets.KONNECT_TOKEN }}' \
          -H 'content-type: application/json' \
          -d @./portal/spec_US.json
          
      # Get spec json
      - name: Get spec json
        run: |
          inso export spec Konnect_ApiOps_Example --output openSpecs.yaml
          documentJson=$(jq -Rs '.' openSpecs.yaml)
          version=$(cat openSpecs.yaml | yq .info.version)
          title=$(cat openSpecs.yaml | yq .info.title)
          echo "DOCUMENT_JSON=$documentJson" >> $GITHUB_ENV
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "TITLE=$title" >> $GITHUB_ENV

       # Push Service Spec EU
      - name: Create EU Service Package
        run: |
          servicePackageId=$( curl -X POST 'https://eu.api.konghq.com/konnect-api/api/service_packages' -H 'content-type: application/json' -H 'authorization: Bearer ${{ secrets.KONNECT_TOKEN }}' --data-raw '{"display_name":"${{ env.TITLE }}","name":"${{ env.TITLE }}","description":null}' | jq -r '.id')         
          echo "SERVICE_PACKAGE_ID=$servicePackageId" >> $GITHUB_ENV
      
      # Publish Service Spec EU
      - name: Publish EU Service Package
        run: |
          curl -X 'PUT' 'https://eu.api.konghq.com/konnect-api/api/service_packages/${{ env.SERVICE_PACKAGE_ID }}/portals/${{ env.PORTAL_EU_ID }}' \
          -H 'authorization: Bearer ${{ secrets.KONNECT_TOKEN }}'

      # Get EU Runtime ID
      - name: Get EU Runtime ID
        run: |
          controlPlaneId=$(curl 'https://eu.api.konghq.com/konnect-api/api/runtime_groups' -H 'authorization: Bearer ${{ secrets.KONNECT_TOKEN }}' | jq -r '.data[] | select(.name=="Konnect_ApiOps") | .id')
          echo "CONTROL_PLANE_ID=$controlPlaneId" >> $GITHUB_ENV

      # Create and Get Service Spec Version
      - name: Create and Get Service Spec Version
        run: |
          serviceVersionId=$(curl -X 'POST' 'https://eu.api.konghq.com/konnect-api/api/service_versions' --data-raw '{"version":"v${{ env.VERSION }}","service_package":"${{ env.SERVICE_PACKAGE_ID }}","control_plane":"${{ env.CONTROL_PLANE_ID }}"}' -H 'content-type: application/json' -H 'authorization: Bearer ${{ secrets.KONNECT_TOKEN }}' | jq -r '.id')
          echo "SERVICE_VERSION_ID=$serviceVersionId" >> $GITHUB_ENV
          
      # Post specs
      - name: Post specs
        run: |
          curl 'https://eu.api.konghq.com/konnect-api/api/service_versions/${{ env.SERVICE_VERSION_ID }}/documents' \
          -H 'content-type: application/json' \
          -H 'authorization: Bearer ${{ secrets.KONNECT_TOKEN }}' \
          --data-raw '{"path":"/test.yaml","content":${{ env.DOCUMENT_JSON }},"published":true}'

      # API Spec linting
      - name: Validate specification
        run: inso lint spec Konnect_ApiOps_Example
      
      # Generate declarative config
      - name: Generate declarative config
        run: |
          inso generate config Konnect_ApiOps_Example --tags Konnect_ApiOps_Example --output kong.yaml
          deck convert --from kong-gateway-2.x --to kong-gateway-3.x --input-file kong.yaml --output-file konnect.yaml
          cat konnect.yaml
      
      # Ping the Kong instance
      # Sync to Konnect
      - name: Update Kong
        run: |
          deck ping --konnect-token "${{ secrets.KONNECT_TOKEN }}" --konnect-addr "https://eu.api.konghq.com" && deck sync --konnect-token "${{ secrets.KONNECT_TOKEN }}" --konnect-addr "https://eu.api.konghq.com" --konnect-runtime-group-name "Konnect_ApiOps" -s konnect.yaml > sync.outputEU.txt
          deck ping --konnect-token "${{ secrets.KONNECT_TOKEN }}" --konnect-addr "https://us.api.konghq.com" && deck sync --konnect-token "${{ secrets.KONNECT_TOKEN }}" --konnect-addr "https://us.api.konghq.com" --konnect-runtime-group-name "Konnect_ApiOps" -s konnect.yaml > sync.outputUS.txt

      # Prepare test spec             
      - name: Prepare URL 4 Test file
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '${'
          tokenSuffix: '}$'
          files: '["./.insomnia/Environment/*.yml"]'
        env:
          KONG_PROXY_EU_URL: '${{ secrets.KONG_PROXY_EU_URL }}'
          KONG_PROXY_US_URL: '${{ secrets.KONG_PROXY_US_URL }}'
      # Run tests on EU endpoint
      - name: Run test suites
        run: inso run test Konnect_ApiOps_Example -e ${{ env.TARGET_ENVIRONMENT }} --verbose
        env:
          TARGET_ENVIRONMENT: EU_Environement
      # Run tests on US endpoint
      - name: Run test suites
        run: inso run test Konnect_ApiOps_Example -e ${{ env.TARGET_ENVIRONMENT }} --verbose
        env:
          TARGET_ENVIRONMENT: US_Environement
